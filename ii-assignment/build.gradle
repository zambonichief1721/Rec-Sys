/* This file may be freely modified, used, and redistributed without restriction. */
/* Set up the repositories to get the LensKit plugin.
 * This configuration pulls in things needed for the build.gradle script itself */
buildscript {
    repositories {
        // LensKit snapshots are published to the Sonatype snapshot repository
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        // LensKit releases are published to Maven Central
        mavenCentral()
    }
    dependencies {
        classpath 'org.grouplens.lenskit:lenskit-gradle:3.0-T5'
    }
}

import org.lenskit.gradle.*

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'lenskit'

/* Set up the repositories for getting LensKit and other libraries.
 * These repositories are used for your Java or Groovy code, and for running LensKit.
 */
repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    mavenCentral()
}


dependencies {
    compile "org.grouplens.lenskit:lenskit-all:3.0-T5"
    runtime "org.grouplens.lenskit:lenskit-cli:3.0-T5"
}

/* Configure LensKit */
lenskit {
    // you can configure the threadCount and maxMemory here, or on the command line
}


ext.userList = []
if (project.hasProperty('userId')) {
    userList = project.userId.split(/,/)
}

ext.itemList = []
if (project.hasProperty('itemIds')) {
    itemList = project.itemIds.split(/,/)
}

task recommend(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args 'recommend'
    args '-c', file('etc/item-item.groovy')
    args userList
}

task itemBasedRecommend(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args 'global-recommend'
    args '-c', file('etc/item-item.groovy')
    args itemList
    maxHeapSize '2g'
}

task predict(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args 'predict'
    args '-c', file('etc/item-item.groovy')
    if (userList.size() > 0) {
        args userList.first()
        args itemList
    }
}

task prepareSubmission(type: Zip, group: 'package') {
    archiveName = 'ii-submission.zip'
    from projectDir
    into 'ii-assignment'
    include 'src/**'
    include 'etc/*/'
    include 'build.gradle'
    include '*.groovy'
    include '*.pdf'
}

task crossfold(type: Crossfold, group: 'evaluate') {
    // download data before evaluating

    input textFile {
        file "data/ratings.csv"
        delimiter ","
        // ratings are on a 1-5 scale
        domain {
            minimum 0.5
            maximum 5.0
            precision 0.5
        }
    }
    // test on random 1/5 of each user's ratings
    userPartitionMethod holdout(5, 'random')
    // use 5-fold cross-validation
    partitionCount 5
    // pack data for efficiency
    outputFormat 'PACK'
}

/* Run the LensKit evaluation */
task evaluate(type: TrainTest, group: 'evaluate') {
    description 'Runs the LensKit evaluation.'

    // we add our crossfold task as evaluation input
    dataSet crossfold

    // send the output to appropriate files
    outputFile "build/eval-results.csv"
    userOutputFile "build/eval-users.csv"

    // configure our algorithms
    algorithm 'algorithms.groovy'

    // and some evaluation tasks and metrics
    predict {
        metric 'coverage'
        metric 'rmse'
        metric 'ndcg'
    }
    recommend {
        listSize 10
        candidateItems "allItems"
        excludeItems "user.trainItems"
        metric 'ndcg'
    }
    recommend {
        listSize 10
        candidateItems "recommender.get(edu.umn.cs.recsys.dao.ItemTagDAO).taggedItems"
        excludeItems "user.trainItems"
        metric 'edu.umn.cs.recsys.TagEntropyMetric'
    }
}
